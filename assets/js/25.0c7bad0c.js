(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{510:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("C++ auto 关键字以及和 for 的用法")])]),t._v(" "),s("h2",{attrs:{id:"auto-的基本使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-的基本使用"}},[t._v("#")]),t._v(" auto 的基本使用")]),t._v(" "),s("p",[t._v("c++11 引入了 auto 类型说明符，auto 让编译器通过初始值来推算变量的类型，所以 auto 定义的变量必须有初始值。"),s("br"),t._v("\n使用 auto 也能在一条语句中声明多个变量，因为一条声明语句只能有一个基本数据类型，所以该语句中所有变量的初始基本数据类型都必须一样:"),s("br"),t._v("\neg: auto i=0,*p=& i; // 正确 auto sz=0,pi=3.14;// 错误，sz 和 pi 的类型不一样。")]),t._v(" "),s("h2",{attrs:{id:"auto-和-for-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-和-for-循环"}},[t._v("#")]),t._v(" auto 和 for 循环，")]),t._v(" "),s("p",[t._v("遍历给定序列中的每个元素并对序列中的每个值执行某种操作。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("declaration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("expression 部分是一个对象，用于表示一个序列，")]),t._v(" "),s("li",[t._v("declaration 部分负责定义一个变量，该变量被用于访问序列中的基础元素，每次迭代")]),t._v(" "),s("li",[t._v("declaration 部分的变量会被初始化为 expression 部分的下一个元素值。")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello,world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对于 s 中的每个字符  ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FW")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       \n")])])]),s("p",[t._v("这个用法相比用循环变量加 "),s("code",[t._v("string.at(i)")]),t._v("  看上去高级多了，并且还很方便")]),t._v(" "),s("ul",[s("li",[t._v("拷贝 range 的元素时，使用 for (auto x : range).")]),t._v(" "),s("li",[t._v("修改 range 的元素时，使用 for (auto && x : range).")]),t._v(" "),s("li",[t._v("只读 range 的元素时，使用 for (const auto & x : range).")])]),t._v(" "),s("h2",{attrs:{id:"auto-的其他常见用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-的其他常见用法"}},[t._v("#")]),t._v(" auto 的其他常见用法")]),t._v(" "),s("p",[t._v("根据初始化表达式自动推断被声明的变量的类型，如:")]),t._v(" "),s("p",[s("code",[t._v("auto f = 3.14; //double")]),t._v(" "),s("br"),t._v(" "),s("code",[t._v('auto s("hello"); //const char*')]),t._v(" "),s("br"),t._v(" "),s("code",[t._v("auto z = new auto(9); //int *")]),t._v(" "),s("br"),t._v(" "),s("code",[t._v("auto x1 = 5, x2 = 5.0, x3 = 'r'; //错误，必须是初始化为同一类型")])]),t._v(" "),s("p",[t._v("但是，这么简单的变量声明类型，不建议用 auto 关键字，而是应更清晰地直接写出其类型。（不要装逼）")]),t._v(" "),s("p",[t._v("auto 关键字更适用于类型冗长复杂、变量使用范围专一时，使程序更清晰易读。如:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" vect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//it 的类型是 std::vector<int>::iterator （有一些难记难打并且丑的单一变量类型都可以替换）")]),t._v("\n   std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"auto-的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-的优缺点"}},[t._v("#")]),t._v(" auto 的优缺点")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("std::vector<std::string>::iterator")]),t._v("  来定义 i 是 C++ 常用的良好的习惯，但是这样长的声明带来了代码可读性的困难，因此引入 auto，使代码可读性增加。并且使用 STL 将会变得更加容易")]),t._v(" "),s("p",[t._v("可以避免类型声明时的麻烦而且避免类型声明时的错误"),s("br"),t._v("\n但是 auto 不能解决所有的精度问题。比如:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")]),t._v("  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4294967295")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最大的unsigned int值  ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("；  \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n   cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a="')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n   cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b="')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n   cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c="')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("就算是 auto 变为的类型也不能阻止数据溢出")]),t._v(" "),s("h2",{attrs:{id:"修饰及注意点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰及注意点"}},[t._v("#")]),t._v(" 修饰及注意点")]),t._v(" "),s("ul",[s("li",[t._v("可以使用指针引用来装饰 auto 类型，他也是一种类型")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pK "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ppK "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("ul",[s("li",[t._v("用 auto 声明的变量必须初始化")]),t._v(" "),s("li",[t._v("auto 不能与其他类型组合连用")]),t._v(" "),s("li",[t._v("函数和模板参数不能被声明为 auto")]),t._v(" "),s("li",[t._v("定义在一个 auto 序列的变量必须始终推导成同一类型（逗号分隔定义）")]),t._v(" "),s("li",[t._v("不能用于类型转换或其他一些操作，如 sizeof 和 typeid")])]),t._v(" "),s("blockquote",[s("p",[t._v("运行时获知变量类型名称，可以使用 typeid (变量).name ()")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("遇到再补")])])])}),[],!1,null,null,null);a.default=r.exports}}]);