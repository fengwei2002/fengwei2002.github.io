(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{534:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("多读书")]),t._v(" "),s("h2",{attrs:{id:"symbol-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型"}},[t._v("#")]),t._v(" symbol 类型")]),t._v(" "),s("h2",{attrs:{id:"object类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object类型"}},[t._v("#")]),t._v(" object 类型")]),t._v(" "),s("h2",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("h3",{attrs:{id:"一元运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一元运算符"}},[t._v("#")]),t._v(" 一元运算符")]),t._v(" "),s("ul",[s("li",[t._v("递增递减操作符")]),t._v(" "),s("li",[t._v("一元加和减"),s("br"),t._v("\n一元加和减操作符主要用于基本的算术，但也可以像上面的例子那样，用于数据类型转换。")])]),t._v(" "),s("h3",{attrs:{id:"位操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位操作"}},[t._v("#")]),t._v(" 位操作")]),t._v(" "),s("p",[t._v("特殊值 NaN 和 Infinity 在位操作中都会被当成 0 处理。")]),t._v(" "),s("h4",{attrs:{id:"按位非"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按位非"}},[t._v("#")]),t._v(" 按位非")]),t._v(" "),s("p",[t._v("按位非的最终效果是对数值取反并减  "),s("strong",[t._v("快")])]),t._v(" "),s("h4",{attrs:{id:"按位与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按位与"}},[t._v("#")]),t._v(" 按位与")]),t._v(" "),s("p",[s("code",[t._v("&")])]),t._v(" "),s("p",[t._v("有一道题：")]),t._v(" "),s("h4",{attrs:{id:"按位或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按位或"}},[t._v("#")]),t._v(" 按位或")]),t._v(" "),s("p",[s("code",[t._v("|")])]),t._v(" "),s("h4",{attrs:{id:"按位异或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按位异或"}},[t._v("#")]),t._v(" 按位异或")]),t._v(" "),s("p",[s("code",[t._v("^")])]),t._v(" "),s("p",[t._v("110 101 011 000")]),t._v(" "),s("p",[t._v("按位异或与按位或的区别是，它只在一位上是 1 的时候返回 1（两位都是 1 或 0，则返回 0）。")]),t._v(" "),s("h4",{attrs:{id:"左移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#左移"}},[t._v("#")]),t._v(" 左移")]),t._v(" "),s("p",[s("code",[t._v("<<")])]),t._v(" "),s("p",[t._v("空位补 0")]),t._v(" "),s("h4",{attrs:{id:"有符号右移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有符号右移"}},[t._v("#")]),t._v(" 有符号右移")]),t._v(" "),s("p",[s("code",[t._v(">>")])]),t._v(" "),s("p",[t._v("右移后空位会出现在左侧，且在符号位之后。"),s("br"),t._v("\nECMAScript 会用符号位的值来填充这些空位，以得到完整的数值。")]),t._v(" "),s("h4",{attrs:{id:"无符号右移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无符号右移"}},[t._v("#")]),t._v(" 无符号右移")]),t._v(" "),s("p",[t._v("无符号右移用 3 个大于号表示（>>>），会将数值的所有 32 位都向右移。对于正数，无符号右移与有符号右移结果相同。")]),t._v(" "),s("p",[t._v("对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会给空位补 0，而不管符号位是"),s("br"),t._v("\n什么。对正数来说，这跟有符号右移效果相同。但对负数来说，结果就差太多了。无符号右移操作符将"),s("strong",[t._v("负数的二进制表示当成正数的二进制")]),t._v("表示来处理。因为负数是其绝对值的二补数")]),t._v(" "),s("h3",{attrs:{id:"布尔操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔操作符"}},[t._v("#")]),t._v(" 布尔操作符")]),t._v(" "),s("h4",{attrs:{id:"逻辑非"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[t._v("#")]),t._v(" 逻辑非")]),t._v(" "),s("p",[t._v("逻辑非操作符也可以用于把任意值转换为布尔值。同时使用两个叹号（!!），相当于调用了转型函"),s("br"),t._v("\n数 Boolean ()。无论操作数是什么类型，第一个叹号总会返回布尔值。第二个叹号对该布尔值取反，"),s("br"),t._v("\n从而给出变量真正对应的布尔值。结果与对同一个值使用 Boolean () 函数是一样的：")]),t._v(" "),s("h4",{attrs:{id:"逻辑与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[t._v("#")]),t._v(" 逻辑与")]),t._v(" "),s("p",[s("code",[t._v("let result = true && false;")])]),t._v(" "),s("ul",[s("li",[t._v("如果第一个操作数是对象，则返回第二个操作数。")]),t._v(" "),s("li",[t._v("如果第二个操作数是对象，则只有第一个操作数求值为 true 才会返回该对象。")]),t._v(" "),s("li",[t._v("如果两个操作数都是对象，则返回第二个操作数。")]),t._v(" "),s("li",[t._v("如果有一个操作数是 null，则返回 null。")]),t._v(" "),s("li",[t._v("如果有一个操作数是 NaN，则返回 NaN。")]),t._v(" "),s("li",[t._v("如果有一个操作数是 undefined，则返回 undefined。")])]),t._v(" "),s("h4",{attrs:{id:"逻辑或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[t._v("#")]),t._v(" 逻辑或")]),t._v(" "),s("ul",[s("li",[t._v("如果第一个操作数是对象，则返回第一个操作数。")]),t._v(" "),s("li",[t._v("如果第一个操作数求值为 false，则返回第二个操作数。")]),t._v(" "),s("li",[t._v("如果两个操作数都是对象，则返回第一个操作数。")]),t._v(" "),s("li",[t._v("如果两个操作数都是 null，则返回 null。")]),t._v(" "),s("li",[t._v("如果两个操作数都是 NaN，则返回 NaN。")]),t._v(" "),s("li",[t._v("如果两个操作数都是 undefined，则返回 undefined")])]),t._v(" "),s("p",[t._v("利用这个行为，可以避免给变量赋值 null 或 undefined。比如："),s("br"),t._v(" "),s("code",[t._v("let myObject = preferredObject || backupObject;")]),t._v(" "),s("br"),t._v("\n 在这个例子中，变量 myObject 会被赋予两个值中的一个。其中，preferredObject 变量包含首选的值，backupObject 变量包含备用的值。如果 preferredObject 不是 null，则它的值就会赋给 myObject；如果 preferredObject 是 null，则 backupObject 的值就会赋给 myObject。这种模式在 ECMAScript 代码中经常用于变量赋值，")]),t._v(" "),s("h3",{attrs:{id:"乘性操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乘性操作符"}},[t._v("#")]),t._v(" 乘性操作符")]),t._v(" "),s("p",[s("code",[t._v("*")])]),t._v(" "),s("p",[t._v("如果 ECMAScript 不能表示乘积，则返回 Infinity 或 -Infinity"),s("br"),t._v("\n 如果有任一操作数是 NaN，则返回 NaN。"),s("br"),t._v("\n如果是 Infinity 乘以 0，则返回 NaN。"),s("br"),t._v("\n如果是 Infinity 乘以非 0 的有限数值，则根据第二个操作数的符号返回 Infinity -Infinity。"),s("br"),t._v("\n如果是 Infinity 乘以 Infinity，则返回 Infinity。"),s("br"),t._v("\n如果有不是数值的操作数，则先在后台用 Number () 将其转换为数值，然后再应用上述规则。")]),t._v(" "),s("p",[s("code",[t._v("let result = 66 / 11;")])]),t._v(" "),s("p",[t._v("如果操作数都是数值，则执行常规的除法运算，即两个正值相除是正值，两个负值相除也是正"),s("br"),t._v("\n值，符号不同的值相除得到负值。如果 ECMAScript 不能表示商，则返回 Infinity 或 - Infinity。"),s("br"),t._v("\n 如果有任一操作数是 NaN，则返回 NaN。"),s("br"),t._v("\n 如果是 Infinity 除以 Infinity，则返回 NaN。"),s("br"),t._v("\n 如果是 0 除以 0，则返回 NaN。"),s("br"),t._v("\n 如果是非 0 的有限值除以 0，则根据第一个操作数的符号返回 Infinity 或 - Infinity。"),s("br"),t._v("\n 如果是 Infinity 除以任何数值，则根据第二个操作数的符号返回 Infinity 或 - Infinity。"),s("br"),t._v("\n 如果有不是数值的操作数，则先在后台用 Number () 函数将其转换为数值，然后再应用上述规则")]),t._v(" "),s("p",[t._v("取模（余数）操作符由一个百分比符号（%）表示，比如："),s("br"),t._v(" "),s("code",[t._v("let result = 26 % 5; // 等于 1")]),t._v(" "),s("br"),t._v("\n 与其他乘性操作符一样，取模操作符对特殊值也有一些特殊的行为。"),s("br"),t._v("\n 如果操作数是数值，则执行常规除法运算，返回余数。"),s("br"),t._v("\n 如果被除数是无限值，除数是有限值，则返回 NaN。"),s("br"),t._v("\n 如果被除数是有限值，除数是 0，则返回 NaN。"),s("br"),t._v("\n 如果是 Infinity 除以 Infinity，则返回 NaN。"),s("br"),t._v("\n 如果被除数是有限值，除数是无限值，则返回被除数。"),s("br"),t._v("\n 如果被除数是 0，除数不是 0，则返回 0。"),s("br"),t._v("\n 如果有不是数值的操作数，则先在后台用 Number () 函数将其转换为数值，然后再应用上述规则")]),t._v(" "),s("h3",{attrs:{id:"指数操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指数操作符"}},[t._v("#")]),t._v(" 指数操作符")]),t._v(" "),s("p",[t._v("ECMAScript 7 新增了指数操作符，Math.pow () 现在有了自己的操作符 **，结果是一样的："),s("br"),t._v("\nconsole.log(Math.pow(3, 2); // 9"),s("br"),t._v("\nconsole.log(3 ** 2); // 9"),s("br"),t._v("\nconsole.log(Math.pow(16, 0.5); // 4"),s("br"),t._v("\nconsole.log(16** 0.5); // 4"),s("br"),t._v("\n 不仅如此，指数操作符也有自己的指数赋值操作符 **=，该操作符执行指数运算和结果的赋值操作："),s("br"),t._v("\nlet squared = 3;"),s("br"),t._v("\nsquared **= 2;"),s("br"),t._v("\nconsole.log(squared); // 9")]),t._v(" "),s("h3",{attrs:{id:"加性操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加性操作符"}},[t._v("#")]),t._v(" 加性操作符")]),t._v(" "),s("p",[s("code",[t._v("+")]),t._v(" "),s("br"),t._v("\n 如果有任一操作数是 NaN，则返回 NaN；"),s("br"),t._v("\n 如果是 Infinity 加 Infinity，则返回 Infinity；"),s("br"),t._v("\n 如果是 - Infinity 加 - Infinity，则返回 - Infinity；"),s("br"),t._v("\n 如果是 Infinity 加 - Infinity，则返回 NaN；"),s("br"),t._v("\n 如果是 + 0 加 + 0，则返回 + 0；"),s("br"),t._v("\n 如果是 - 0 加 + 0，则返回 + 0；"),s("br"),t._v("\n 如果是 - 0 加 - 0，则返回 - 0。"),s("br"),t._v("\n用括号把两个数值变量括了起来，意思是让解释器先执行两个数值的加法，然后再把结"),s("br"),t._v("\n果追加给字符串。")]),t._v(" "),s("p",[t._v("数字和字符串的连接要使用加号，使用括号提高优先级")]),t._v(" "),s("p",[s("code",[t._v("-")]),t._v(" "),s("br"),t._v("\n 如果有任一操作数是 NaN，则返回 NaN。"),s("br"),t._v("\n 如果是 Infinity 减 Infinity，则返回 NaN。"),s("br"),t._v("\n 如果是 - Infinity 减 - Infinity，则返回 NaN。"),s("br"),t._v("\n 如果是 Infinity 减 - Infinity，则返回 Infinity。"),s("br"),t._v("\n 如果是 - Infinity 减 Infinity，则返回 - Infinity。"),s("br"),t._v("\n 如果是 + 0 减 + 0，则返回 + 0。"),s("br"),t._v("\n 如果是 + 0 减 - 0，则返回 - 0。"),s("br"),t._v("\n 如果是 - 0 减 - 0，则返回 + 0。")]),t._v(" "),s("h3",{attrs:{id:"关系操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关系操作符"}},[t._v("#")]),t._v(" 关系操作符")]),t._v(" "),s("p",[t._v(" 如果操作数都是数值，则执行数值比较。"),s("br"),t._v("\n 如果操作数都是字符串，则逐个比较字符串中对应字符的编码。"),s("br"),t._v("\n 如果有任一操作数是数值，则将另一个操作数"),s("strong",[t._v("转换为数值")]),t._v("，执行数值比较。"),s("br"),t._v("\n 如果有任一操作数是对象，则调用其 valueOf () 方法，取得结果后再根据前面的规则执行比较。"),s("br"),t._v("\n如果没有 valueOf () 操作符，则调用 toString () 方法，取得结果后再根据前面的规则执行比较。"),s("br"),t._v("\n 如果有任一操作数是布尔值，则将其转换为数值再执行比较。")]),t._v(" "),s("p",[t._v("大写字母的编码都小于小写字母的编码"),s("br"),t._v("\n字母 B 的编码是 66，字母 a 的编码是 97。"),s("br"),t._v("\n要得到确实按字母顺序比较的结果，就必须把两者都转换为相同的大小写形式（全大写或全小写），"),s("br"),t._v("\n然后再比较："),s("br"),t._v(" "),s("code",[t._v('let result = "Brick".toLowerCase() < "alphabet".toLowerCase(); // false')])]),t._v(" "),s("p",[s("code",[t._v('let result = "23" < "3"; // true')]),t._v(" "),s("br"),t._v("\n 不过，如果有一个操作数是数值，那么比较的结果就对了："),s("br"),t._v(" "),s("code",[t._v('let result = "23" < 3; // false')])]),t._v(" "),s("p",[t._v('let result = "a" < 3; // 因为 "a" 会转换为 NaN，所以结果是 false'),s("br"),t._v('\n 因为字符 "a" 不能转换成任何有意义的数值，所以只能转换为 NaN。这里有一个规则，即任何关系'),s("br"),t._v("\n操作符在涉及比较 NaN 时都返回 false。这样一来，下面的例子有趣了："),s("br"),t._v("\nlet result1 = NaN < 3; // false"),s("br"),t._v("\nlet result2 = NaN >= 3; // false")]),t._v(" "),s("h3",{attrs:{id:"相等操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符"}},[t._v("#")]),t._v(" 相等操作符")]),t._v(" "),s("p",[t._v("等于和不等于")]),t._v(" "),s("p",[t._v("如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等。"),s("br"),t._v("\n如果任一操作数是布尔值，则将其转换为数值再比较是否相等。false 转换为 0，true 转换为 1")]),t._v(" "),s("p",[t._v("null 和 undefined "),s("strong",[t._v("相等。")]),s("br"),t._v("\nnull 和 undefined 不能转换为其他类型的值再进行比较"),s("br"),t._v("\n如果有任一操作数是 NaN，则相等操作符返回 false，不相等操作符返回 true。记住：即使两个操作数都是 NaN，相等操作符也返回 false，因为按照规则，NaN 不等于 NaN。"),s("br"),t._v("\n如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，"),s("br"),t._v("\n则相等操作符返回 true。否则，两者不相等")]),t._v(" "),s("p",[t._v("全等和不全等")]),t._v(" "),s("p",[t._v("虽然 null == undefined 是 true（因为这两个值类似），但 null === undefined 是"),s("br"),t._v("\n false，因为它们不是相同的数据类型。")]),t._v(" "),s("p",[t._v("推荐使用群等和不全等运算符")]),t._v(" "),s("h3",{attrs:{id:"条件操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件操作符"}},[t._v("#")]),t._v(" 条件操作符")]),t._v(" "),s("p",[t._v("就是那个三元表达式就是条件运算符，可以当作右值使用")]),t._v(" "),s("p",[s("code",[t._v("variable = boolean_expression ? true_value : false_value;")])]),t._v(" "),s("h3",{attrs:{id:"赋值操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值操作符"}},[t._v("#")]),t._v(" 赋值操作符")]),t._v(" "),s("p",[s("code",[t._v("+=")]),t._v("  类似的写法仅仅是简写语法，使用它们不会提升性能")]),t._v(" "),s("h3",{attrs:{id:"逗号操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逗号操作符"}},[t._v("#")]),t._v(" 逗号操作符")]),t._v(" "),s("p",[s("code",[t._v("let num1 = 1, num2 = 2, num3 = 3;")])]),t._v(" "),s("p",[s("code",[t._v("let num = (5, 1, 4, 8, 0); // num 的值为 0")])]),t._v(" "),s("h2",{attrs:{id:"语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[t._v("#")]),t._v(" 语句")]),t._v(" "),s("p",[t._v("if"),s("br"),t._v("\ndo-while"),s("br"),t._v("\nwhile ()"),s("br"),t._v("\n for () 常用")]),t._v(" "),s("h3",{attrs:{id:"for-in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for in")]),t._v(" "),s("p",[t._v("用于枚举对象中的非符号键属性")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("这个例子使用 for-in 循环显示了 BOM 对象 window 的所有属性。每次执行循环，都会给变量"),s("br"),t._v("\n propName 赋予一个 window 对象的属性作为值，直到 window 的所有属性都被枚举一遍。")]),t._v(" "),s("p",[t._v("为了确保这个局部变量不被修改，推荐使用 const")]),t._v(" "),s("p",[t._v("ECMAScript 中对象的属性是无序的，因此 for-in 语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。如果 for-in 循环要迭代的变量是 null 或 undefined，则不执行循环体。")]),t._v(" "),s("h3",{attrs:{id:"for-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[t._v("#")]),t._v(" for of")]),t._v(" "),s("p",[t._v("用于遍历可迭代对象的元素")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" el "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("for-of 循环会按照可迭代对象的 next () 方法产生值的顺序迭代元素。"),s("br"),t._v("\n如果尝试迭代的变量不支持迭代，则 for-of 语句会抛出错误")]),t._v(" "),s("h3",{attrs:{id:"for-await-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-await-of"}},[t._v("#")]),t._v(" for-await-of")]),t._v(" "),s("p",[t._v("TODO：ES2018 对 for-of 语句进行了扩展，增加了 for-await-of 循环，以支持生成期"),s("br"),t._v("\n约（promise）的异步可迭代对象")]),t._v(" "),s("h3",{attrs:{id:"break-countinue-标签语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break-countinue-标签语句"}},[t._v("#")]),t._v(" break countinue 标签语句")]),t._v(" "),s("p",[t._v("标签语句用于给语句加标签，语法如下："),s("br"),t._v(" "),s("code",[t._v("label: statement")]),t._v(" "),s("br"),t._v("\n 下面是一个例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在这个例子中，start 是一个标签，可以在后面通过 break 或 continue 语句引用。标签语句的"),s("br"),t._v("\n典型应用场景是嵌套循环。注意标签要使用描述性强的文本，而嵌套也不要太深。")]),t._v(" "),s("h3",{attrs:{id:"with-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#with-语句"}},[t._v("#")]),t._v(" with 语句")]),t._v(" "),s("p",[t._v("相同作用域的情况简化代码")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" qs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hostName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("href"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("上面代码中的每一行都用到了 location 对象。如果使用 with 语句，就可以少写一些代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" qs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hostName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" href"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("这里，with 语句用于连接 location 对象。这意味着在这个语句内部，每个变量首先会被认为是"),s("br"),t._v("\n一个局部变量。如果没有找到该局部变量，则会搜索 location 对象，看它是否有一个同名的属性。如果有，则该变量会被求值为 location 对象的属性。")]),t._v(" "),s("p",[t._v("严格模式"),s("strong",[t._v("不允许")]),t._v("使用 with 语句，否则会抛出错误。"),s("br"),t._v("\n由于 with 语句影响性能且难于调试其中的代码，通常"),s("strong",[t._v("不推荐")]),t._v("在产品代码中使用 with 语句")]),t._v(" "),s("h3",{attrs:{id:"switch-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch-语句"}},[t._v("#")]),t._v(" switch 语句")]),t._v(" "),s("p",[t._v("switch 语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类"),s("br"),t._v('\n型（比如，字符串 "10" 不等于数值 10）。')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Less than 0."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Between 0 and 10."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Between 10 and 20."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"More than 20."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面的代码首先在外部定义了变量 num，而传给 switch 语句的参数之所以是 true，就是因为每"),s("br"),t._v("\n个条件的表达式都会返回布尔值。条件的表达式分别被求值，直到有表达式返回 true；否则，就会一直跳到 default 语句（这个例子正是如此）")]),t._v(" "),s("h2",{attrs:{id:"函数基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数基础"}},[t._v("#")]),t._v(" 函数基础")]),t._v(" "),s("p",[t._v("ECMAScript 中的函数与其他语言中的函数不一样。")]),t._v(" "),s("p",[t._v(" 不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。"),s("br"),t._v("\n 不指定返回值的函数实际上会返回特殊值 undefined。")]),t._v(" "),s("p",[t._v("严格模式对函数也有一些限制：")]),t._v(" "),s("p",[t._v(" 函数不能以 eval 或 arguments 作为名称；"),s("br"),t._v("\n 函数的参数不能叫 eval 或 arguments；"),s("br"),t._v("\n 两个命名参数不能拥有同一个名称")])])}),[],!1,null,null,null);a.default=r.exports}}]);